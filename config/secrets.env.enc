import time
import os
from dotenv import load_dotenv

# Load environment variables from a .env file if present
load_dotenv()

class TokenMonitor:
    def __init__(self, required_keys=None, log_path="logs/token_usage.log"):
        """
        Initializes the TokenMonitor with a set of required keys and ensures they're present in the environment.
        """
        self.required_keys = required_keys or [
            "OPENAI_API_KEY",
            "DATABASE_PASSWORD",
            "PAYPAL_CLIENT_ID",
            "BANK_ACCOUNT_SECRET"
        ]
        self.log_path = log_path
        self._ensure_log_directory()
        self.validate_keys()

    def _ensure_log_directory(self):
        """
        Ensures that the log directory exists to avoid write errors.
        """
        log_dir = os.path.dirname(self.log_path)
        os.makedirs(log_dir, exist_ok=True)

    def validate_keys(self):
        """
        Validates that all required environment variables are set.
        """
        for key in self.required_keys:
            if not os.getenv(key):
                raise ValueError(f"[ENV ERROR] Missing required environment variable: {key}")

    def log_usage(self, service: str):
        """
        Logs token usage without exposing sensitive data.
        """
        try:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            with open(self.log_path, "a", encoding="utf-8") as f:
                f.write(f"{timestamp} - Used token for {service}\n")
        except Exception as e:
            print(f"[LOGGING ERROR] Failed to write token usage log: {e}")

    def secure_fetch(self, key: str) -> str:
        """
        Securely fetches a token from environment variables and logs its access.
        """
        value = os.getenv(key)
        if value:
            self.log_usage(key)
            return value
        else:
            raise ValueError(f"[SECURE FETCH ERROR] Environment variable {key} is not set or is empty.")

    def get_masked_token(self, key: str) -> str:
        """
        Returns a masked version of the token for safe display.
        """
        token = self.secure_fetch(key)
        return f"{token[:4]}...{token[-4:]}" if len(token) > 8 else "[MASKED]"

    def all_tokens_masked(self) -> dict:
        """
        Returns all required tokens in masked form for audit/debug views.
        """
        return {key: self.get_masked_token(key) for key in self.required_keys}

# Example usage:
if __name__ == "__main__":
    try:
        monitor = TokenMonitor()
        openai_token = monitor.get_masked_token("OPENAI_API_KEY")
        print(f"[INFO] Using OpenAI API Token: {openai_token}")

        # Example: securely fetch and use token
        actual_token = monitor.secure_fetch("OPENAI_API_KEY")
        # Use `actual_token` in a secure request (not printed/logged)

    except ValueError as err:
        print(f"[ERROR] {err}")
